== Abstract Syntax Tree ==
LogicalProject(eventTime=[$4], timeString=[$2], token=[$1], user_id=[$3], type=[$5], type0=[$10], EXPR$6=[+($5, $10)])
+- LogicalJoin(condition=[AND(=($3, $8), =($1, $7), >=($0, -($6, 2000:INTERVAL SECOND)), <=($0, +($6, 2000:INTERVAL SECOND)))], joinType=[left])
   :- LogicalProject(t=[$5], token=[$2], timeString=[$1], user_id=[$3], eventTime=[$0], type=[$4])
   :  +- LogicalWatermarkAssigner(rowtime=[t], watermark=[-($5, 5000:INTERVAL SECOND)])
   :     +- LogicalProject(eventTime=[$0], timeString=[$1], token=[$2], user_id=[$3], type=[$4], t=[TO_TIMESTAMP(FROM_UNIXTIME(/($0, 1000)))])
   :        +- LogicalTableScan(table=[[default_catalog, default_database, showTable, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]]])
   +- LogicalProject(t=[$5], token=[$2], user_id=[$3], eventTime=[$0], type=[$4])
      +- LogicalWatermarkAssigner(rowtime=[t], watermark=[-($5, 5000:INTERVAL SECOND)])
         +- LogicalProject(eventTime=[$0], timeString=[$1], token=[$2], user_id=[$3], type=[$4], t=[TO_TIMESTAMP(FROM_UNIXTIME(/($0, 1000)))])
            +- LogicalTableScan(table=[[default_catalog, default_database, click, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]]])

== Optimized Logical Plan ==
Calc(select=[eventTime, timeString, token, user_id, type, type0, +(type, type0) AS EXPR$6])
+- WindowJoin(joinType=[LeftOuterJoin], windowBounds=[isRowTime=true, leftLowerBound=-2000, leftUpperBound=2000, leftTimeIndex=0, rightTimeIndex=0], where=[AND(=(user_id, user_id0), =(token, token0), >=(t, -(t0, 2000:INTERVAL SECOND)), <=(t, +(t0, 2000:INTERVAL SECOND)))], select=[t, token, timeString, user_id, eventTime, type, t0, token0, user_id0, eventTime0, type0])
   :- Exchange(distribution=[hash[user_id, token]])
   :  +- Calc(select=[t, token, timeString, user_id, eventTime, type])
   :     +- WatermarkAssigner(rowtime=[t], watermark=[-(t, 5000:INTERVAL SECOND)])
   :        +- Calc(select=[eventTime, timeString, token, user_id, type, TO_TIMESTAMP(FROM_UNIXTIME(/(eventTime, 1000))) AS t])
   :           +- TableSourceScan(table=[[default_catalog, default_database, showTable, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]]], fields=[eventTime, timeString, token, user_id, type])
   +- Exchange(distribution=[hash[user_id, token]])
      +- Calc(select=[t, token, user_id, eventTime, type])
         +- WatermarkAssigner(rowtime=[t], watermark=[-(t, 5000:INTERVAL SECOND)])
            +- Calc(select=[eventTime, timeString, token, user_id, type, TO_TIMESTAMP(FROM_UNIXTIME(/(eventTime, 1000))) AS t])
               +- TableSourceScan(table=[[default_catalog, default_database, click, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]]], fields=[eventTime, timeString, token, user_id, type])

== Physical Execution Plan ==
Stage 1 : Data Source
	content : Source: KafkaTableSource(eventTime, timeString, token, user_id, type)

	Stage 2 : Operator
		content : SourceConversion(table=[default_catalog.default_database.showTable, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]], fields=[eventTime, timeString, token, user_id, type])
		ship_strategy : FORWARD

		Stage 3 : Operator
			content : Calc(select=[eventTime, timeString, token, user_id, type, TO_TIMESTAMP(FROM_UNIXTIME((eventTime / 1000))) AS t])
			ship_strategy : FORWARD

			Stage 4 : Operator
				content : WatermarkAssigner(rowtime=[t], watermark=[(t - 5000:INTERVAL SECOND)])
				ship_strategy : FORWARD

				Stage 5 : Operator
					content : Calc(select=[t, token, timeString, user_id, eventTime, type])
					ship_strategy : FORWARD

Stage 7 : Data Source
	content : Source: KafkaTableSource(eventTime, timeString, token, user_id, type)

	Stage 8 : Operator
		content : SourceConversion(table=[default_catalog.default_database.click, source: [KafkaTableSource(eventTime, timeString, token, user_id, type)]], fields=[eventTime, timeString, token, user_id, type])
		ship_strategy : FORWARD

		Stage 9 : Operator
			content : Calc(select=[eventTime, timeString, token, user_id, type, TO_TIMESTAMP(FROM_UNIXTIME((eventTime / 1000))) AS t])
			ship_strategy : FORWARD

			Stage 10 : Operator
				content : WatermarkAssigner(rowtime=[t], watermark=[(t - 5000:INTERVAL SECOND)])
				ship_strategy : FORWARD

				Stage 11 : Operator
					content : Calc(select=[t, token, user_id, eventTime, type])
					ship_strategy : FORWARD

					Stage 13 : Operator
						content : WindowJoin(joinType=[LeftOuterJoin], windowBounds=[isRowTime=true, leftLowerBound=-2000, leftUpperBound=2000, leftTimeIndex=0, rightTimeIndex=0], where=[((user_id = user_id0) AND (token = token0) AND (t >= (t0 - 2000:INTERVAL SECOND)) AND (t <= (t0 + 2000:INTERVAL SECOND)))], select=[t, token, timeString, user_id, eventTime, type, t0, token0, user_id0, eventTime0, type0])
						ship_strategy : HASH

						Stage 14 : Operator
							content : Calc(select=[eventTime, timeString, token, user_id, type, type0, (type + type0) AS EXPR$6])
							ship_strategy : FORWARD
